// Place your key bindings in this file to override the defaults
[
  // Table of contents:
  //
  // - Make <ctrl+g> behave like in Emacs: cancel every and all actions.
  // - When performing a search, make <enter> quit the action and enter normal
  //   mode.
  // - Emacs: <M+x> to open the list of commands.
  // - <ctrl+s> to save a file.
  // - Emacs navigation
  // - Peek actions regardless of Vim mode.
  // - <M+j> to insert another comment line.
  // - <ctrl+o> and <ctrl+t> to navigate back and forward.
  // - <C-c l r> to call LSP rename.
  // - <C-c .> for quick fix (including LSP actions)
  // - <{ cmd, alt }+backspace> to delete word left
  // - <ctrl+{PageDown, PageUp}> to navigate next/previous editor in group.
  // - (Linux) <ctrl+{n,p}> to select next/previous suggestion
  // - (Linux) <ctrl+f> to find outside of insert mode
  // - (Linux) <Super+{p,w,b,j}> to interact with VSCode
  //
  //
  // --------------------------------------------------------------------------
  // Make <ctrl+g> behave like in Emacs: cancel every and all actions.
  {
    "key": "ctrl+g",
    "command": "-workbench.action.gotoLine"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+g",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "ctrl+g",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "ctrl+g",
    "command": "runCommands",
    "when": "editorHasSelection && textInputFocus",
    "args": {
      "commands": ["cancelSelection", "extension.vim_escape"]
    }
  },
  {
    "key": "ctrl+g",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+g",
    "when": "editorFocus && findWidgetVisible && !isComposing",
    "command": "runCommands",
    "args": {
      "commands": ["closeFindWidget", "extension.vim_escape"]
    }
  },
  {
    "key": "ctrl+g",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+g",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode"
  },
  {
    "key": "ctrl+g",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  // --------------------------------------------------------------------------
  // When performing a search, make <enter> quit the action and enter normal
  // mode.
  {
    "key": "enter",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "enter",
    "when": "editorFocus && findWidgetVisible && !isComposing",
    "command": "runCommands",
    "args": {
      "commands": ["closeFindWidget", "extension.vim_escape"]
    }
  },
  // --------------------------------------------------------------------------
  // Emacs: <M+x> to open the list of commands.
  {
    "key": "alt+x",
    "command": "workbench.action.showCommands"
  },
  // --------------------------------------------------------------------------
  // <ctrl+s> to save a file.
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.save",
    "when": "isLinux"
  },
  // --------------------------------------------------------------------------
  // Emacs navigation.
  {
    "key": "alt+b",
    "command": "cursorWordLeft",
    "when": "inputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "alt+f",
    "command": "cursorWordRight",
    "when": "inputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "alt+d",
    "command": "deleteWordRight",
    "when": "inputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+f",
    "command": "cursorRight",
    "when": "isLinux && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+b",
    "command": "cursorLeft",
    "when": "isLinux"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen",
    "when": "isLinux"
  },
  {
    "key": "ctrl+e",
    "command": "cursorLineEnd",
    "when": "isLinux"
  },
  {
    "key": "ctrl+a",
    "command": "-editor.action.selectAll"
  },
  {
    "key": "ctrl+a",
    "command": "cursorLineStart",
    "when": "isLinux"
  },
  {
    "key": "alt+m",
    "command": "runCommands",
    "args": {
      "commands": ["cursorLineStart", "cursorWordStartRight"]
    }
  },
  // --------------------------------------------------------------------------
  // Peek actions regardless of Vim mode.
  {
    "key": "ctrl+c g T",
    "command": "editor.action.peekTypeDefinition",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+c g r",
    "command": "editor.action.referenceSearch.trigger",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+c g d",
    "command": "editor.action.peekDefinition",
    "when": "editorFocus"
  },
  // --------------------------------------------------------------------------
  // <M+j> to insert another comment line.
  {
    "key": "alt+j",
    "when": "editorFocus && !editorReadOnly",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.insertLineAfter", "editor.action.commentLine"]
    }
  },
  // --------------------------------------------------------------------------
  // <ctrl+o> and <ctrl+t> to navigate back and forward.
  {
    "key": "ctrl+o",
    "when": "editorFocus && canNavigateBack",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+t",
    "when": "editorFocus && canNavigateForward",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "ctrl+t",
    "command": "-editor.action.transposeLetters",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+c t",
    "when": "editorFocus",
    "command": "workbench.action.tasks.test"
  },
  // --------------------------------------------------------------------------
  // <C-c l r> to call LSP rename.
  {
    "key": "ctrl+c l r",
    "when": "editorTextFocus && editorHasRenameProvider",
    "command": "editor.action.rename"
  },
  // --------------------------------------------------------------------------
  // <C-c .> for quick fix (including LSP actions)
  {
    "key": "ctrl+c [KeyV]",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  // --------------------------------------------------------------------------
  // <{ cmd, alt }+backspace> to delete word left
  {
    "key": "cmd+backspace",
    "command": "-deleteAllLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "cmd+backspace",
    "command": "deleteWordLeft",
    "when": "isMac && textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+backspace",
    "command": "deleteWordLeft",
    "when": "isLinux && textInputFocus && !editorReadOnly"
  },
  // --------------------------------------------------------------------------
  // <{ cmd, alt }+backspace> to delete word left
  {
    "key": "cmd+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "cmd+q",
    "command": "rewrap.rewrapComment"
  },
  // --------------------------------------------------------------------------
  // <ctrl+{PageDown, PageUp}> to navigate next/previous editor in group
  {
    "key": "ctrl+PageDown",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+PageUp",
    "command": "workbench.action.previousEditorInGroup"
  },
  // --------------------------------------------------------------------------
  // (Linux) <ctrl+{n,p}> to select next/previous suggestion
  {
    "key": "ctrl+n",
    "when": "isLinux",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "when": "isLinux && inQuickOpen",
    "command": "workbench.action.quickOpenSelectNext"
  },
  {
    "key": "ctrl+n",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+p",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+p",
    "when": "isLinux",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+p",
    "when": "isLinux && inQuickOpen",
    "command": "workbench.action.quickOpenSelectPrevious"
  },
  // --------------------------------------------------------------------------
  // (Linux) <ctrl+f> to find outside of insert mode
  {
    "key": "ctrl+f",
    "command": "actions.find",
    "when": "isLinux && (editorFocus || editorIsOpen) && vim.mode != 'Insert'"
  },
  // --------------------------------------------------------------------------
  // (Linux) <Super+{p,w,b,j}> to interact with VSCode
  {
    "key": "meta+p",
    "when": "isLinux",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "meta+w",
    "when": "isLinux",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility",
    "when": "isLinux"
  },
  {
    "key": "meta+b",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "isLinux"
  },
  {
    "key": "ctrl+j",
    "when": "isLinux",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "meta+j",
    "when": "isLinux",
    "command": "workbench.action.togglePanel"
  }
]
